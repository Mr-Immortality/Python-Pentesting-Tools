import portscanner

# Input the target IP address to scan for open ports
targets_ip = input('[+] * Enter Target To Scan For Vulnerable Open Ports: ')

# Input the number of ports to scan (500 for the first 500 ports, for example)
port_number = int(input('[+] * Enter Amount Of Ports You Want To Scan (500 - first 500 ports): '))

# Input the path to the file containing vulnerable software information, in this case vulbanners.txt
vul_file = input('[+] * Enter Path To The File With Vulnerable Softwares: ')
print('\n')

# Create an instance of the PortScan class with the provided target IP and port number
target = portscanner.PortScan(targets_ip, port_number)

# Initiate the port scanning process
target.scan()

# Open the vulnerable software file in read mode
with open(vul_file, 'r') as file:
    count = 0
    # Iterate through the banners collected during the port scanning process
    for banner in target.banners:
        file.seek(0)  # Move the file cursor to the beginning of the file
        # Iterate through each line in the vulnerable software file
        for line in file.readlines():
            # Check if the current line (stripped of whitespace) is present in the banner
            if line.strip() in banner:
                # Print a message indicating a vulnerable banner and the associated port
                print('[!!] VULNERABLE BANNER: "' + banner + '" ON PORT: ' + str(target.open_ports[count]))
        count += 1  # Move to the next banner and port pair

# The code above scans the specified target for open ports, matches banners with vulnerable software,
# and prints a message if a vulnerable banner is detected on a specific port.