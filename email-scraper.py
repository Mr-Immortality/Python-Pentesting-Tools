from bs4 import BeautifulSoup  # Import the BeautifulSoup library for HTML parsing
import requests  # Import the requests library for making HTTP requests
import requests.exceptions  # Import specific exceptions from the requests library
import urllib.parse  # Import urllib.parse for URL manipulation
from collections import deque  # Import deque for implementing a double-ended queue
import re  # Import the re module for regular expressions

# Get the target URL from the user
user_url = str(input('[+] Enter Target URL To Scan: '))
urls = deque([user_url])  # Initialize a deque (double-ended queue) with the user-provided URL

scraped_urls = set()  # Initialize a set to store scraped URLs
emails = set()  # Initialize a set to store scraped email addresses

count = 0  # Initialize a counter for processed URLs
try:
    while len(urls):
        count += 1
        if count == 100:
            break
        url = urls.popleft()  # Get the next URL from the queue
        scraped_urls.add(url)  # Add the URL to the set of scraped URLs

        parts = urllib.parse.urlsplit(url)  # Split the URL into its components
        base_url = '{0.scheme}://{0.netloc}'.format(parts)  # Get the base URL

        path = url[:url.rfind('/')+1] if '/' in parts.path else url  # Extract the path of the URL

        print('[%d] Processing %s' % (count, url))
        try:
            response = requests.get(url)  # Send an HTTP GET request to the URL
        except (requests.exceptions.MissingSchema, requests.exceptions.ConnectionError):
            continue

        # Use regular expression to find and extract email addresses from the response
        new_emails = set(re.findall(r"[a-z0-9\.\-+_]+@[a-z0-9\.\-+_]+\.[a-z]+", response.text, re.I))
        emails.update(new_emails)  # Update the set of email addresses

        soup = BeautifulSoup(response.text, features="lxml")  # Parse the HTML content using BeautifulSoup

        # Iterate through anchor tags in the HTML and extract links
        for anchor in soup.find_all("a"):
            link = anchor.attrs['href'] if 'href' in anchor.attrs else ''
            if link.startswith('/'):
                link = base_url + link
            elif not link.startswith('http'):
                link = path + link
            if not link in urls and not link in scraped_urls:
                urls.append(link)  # Add valid new links to the queue for further processing
except KeyboardInterrupt:
    print('[-] Closing!')

# Print the scraped email addresses
for mail in emails:
    print(mail)
