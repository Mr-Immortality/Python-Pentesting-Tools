import socket
from IPy import IP

class PortScan():
    # Class variables to store banners and open ports
    banners = []
    open_ports = []

    # Constructor initializes the target and port number
    def __init__(self, target, port_num):
        self.target = target
        self.port_num = port_num

    # Method to initiate the scan
    def scan(self):
        for port in range(1, 500):  # Loop through ports from 1 to 499
            self.scan_port(port)    # Call the scan_port method to scan the specific port

    # Method to check if the target is an IP address or hostname and convert if needed
    def check_ip(self):
        try:
            IP(self.target)  # Try to parse the target as an IP address
            return self.target
        except ValueError:
            return socket.gethostbyname(self.target)  # Resolve the hostname to an IP address

    # Method to scan a specific port on the target IP address
    def scan_port(self, port):
        try:
            converted_ip = self.check_ip()  # Convert target to IP address if needed
            sock = socket.socket()  # Create a socket object
            sock.settimeout(0.5)     # Set a timeout for the socket connection attempt
            sock.connect((converted_ip, port))  # Attempt to connect to the IP address and port
            self.open_ports.append(port)  # Record the open port in the open_ports list
            try:
                banner = sock.recv(1024).decode().strip('\n').strip('\r')  # Receive and decode the banner message
                self.banners.append(banner)  # Record the banner in the banners list
            except:
                self.banners.append(' ')  # If no banner is received, record an empty string
            sock.close()  # Close the socket connection
        except:
            pass  # If connection attempt fails, ignore and continue scanning
