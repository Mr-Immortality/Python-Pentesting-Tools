import hashlib  # Import the hashlib module for hashing functions

# Get user input for the type of hash to brute-force, the file path, and the hash value
type_of_hash = str(input('Which type of hash you want to bruteforce ?'))
file_path = str(input('Enter path to the file to bruteforce with: '))
hash_to_decrypt = str(input('Enter Hash Value To Bruteforce: '))

# Open the specified file in read mode
with open(file_path, 'r') as file:
    # Loop through each line in the file
    for line in file.readlines():
        # Check if the user wants to brute-force an MD5 hash
        if type_of_hash == 'md5':
            hash_object = hashlib.md5(line.strip().encode())  # Create an MD5 hash object
            hashed_word = hash_object.hexdigest()  # Get the hexadecimal digest of the hash
            # Compare the calculated hash with the target hash
            if hashed_word == hash_to_decrypt:
                print('Found MD5 Password: ' + line.strip())  # Print the found password
                exit(0)  # Exit the script gracefully

        # Check if the user wants to brute-force a SHA-1 hash
        if type_of_hash == 'sha1':
            hash_object = hashlib.sha1(line.strip().encode())  # Create a SHA-1 hash object
            hashed_word = hash_object.hexdigest()  # Get the hexadecimal digest of the hash
            # Compare the calculated hash with the target hash
            if hashed_word == hash_to_decrypt:
                print('Found SHA1 Password: ' + line.strip())  # Print the found password
                exit(0)  # Exit the script gracefully

    # If no match is found, print a message indicating the password is not in the file
    print('Password Not In File.')
